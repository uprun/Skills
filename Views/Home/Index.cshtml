@{
    ViewData["Title"] = "Skills";
}
<script>
    function applyMigrations()
    {
        $.ajax({
                type: "POST",
                url: "Home/ApplyMigrations",
                success: function(retrievedData) {

                    alert('success');

                },
                error:function(){
                    alert('error');

                },
                dataType: "json"
            });

    };
    
    function TagModel(data)
    {
        var self = this;
        self.id = ko.observable(data.id);
        self.tag = ko.observable(data.tag);
        self.value = ko.observable(data.value);
    };

    function NodeModel(data)
    {
        var self = this;
        self.id = ko.observable(data.id);
        
        self.tags = ko.observableArray(
            ko.utils.arrayMap(data.tags, function(elem) {
                    return new TagModel(elem);
                }
            )
        );

        var match = ko.utils.arrayFirst(self.tags(), function(item) {
            return item.tag() == "name";
        });
        if(match){
            self.name = ko.observable(match.value());
        }
        var templateTypeSearch = ko.utils.arrayFirst(self.tags(), function(item) {
            return item.tag() == "%type";
        });
        if(templateTypeSearch) {
            self.templateType = ko.observable(templateTypeSearch.value());
        }

        
        self.ToProcessIsExpanded = ko.observable(false);
        self.ExpandToProcess = function() {
            self.ToProcessIsExpanded(true);
        };
        self.CollapseToProcess = function() {
            self.ToProcessIsExpanded(false);
        }

        self.UrlToAdd = ko.observable("");
        self.AddUrlToProcess = function()
        {
            if(self.UrlToAdd())
            {
                $.ajax({
                    type: "POST",
                    url: "Home/AddUrlToProcess",
                    data: {
                        HostNodeId: self.id(),
                        url : self.UrlToAdd()
                    }
                    ,
                    success: function(retrievedData) {

                       
                        self.ToProcess.push(retrievedData.url);
                        self.UrlToAdd("");

                    },
                    dataType: "json"
                });
            }
            
        };

        self.RawViewIsEnabled = ko.observable(false);
        self.EnableRawView = function(){
            self.RawViewIsEnabled(true);
        };
        self.DisableRawView = function() {
            self.RawViewIsEnabled(false);
        };


    };


    function AvailableSkillsViewModel(data)
    {
        var self = this;
        if(data != null){
            self.skills = ko.observableArray(
                ko.utils.arrayMap(data, function(elem) {
                    return new NodeModel(elem);
                }
            ));
        }
        else
        {
            self.skills = ko.observableArray([]);
        }

        self.templates = ko.observableArray([]);

        self.newSkillName = ko.observable("");
        self.AddNewSkill = function()
        {
            
            var skillName = self.newSkillName();
            var dataToSend = {
                    skillName : skillName
                };
            $.ajax({
                type: "POST",
                url: "Home/NewSkill",
                data: dataToSend,
                success: function(retrievedData) {

                    var newSkill = new NodeModel(retrievedData);
                    self.skills.push(newSkill);
                    self.newSkillName("");

                },
                dataType: "json"
            });
            
        };

        
        self.RetrieveDataFromServer = function() {
            $.ajax({
                type: "POST",
                url: "Home/GetSkillsAvailable",
                data: {
                    
                },
                success: function(data) {
                    var toAdd = ko.utils.arrayMap(data, function(elem) {
                        return new NodeModel(elem);
                    });
                    ko.utils.arrayPushAll(self.skills, toAdd);

                },
                dataType: "json"
            });

        };

        self.RetrieveTemplatesFromServer = function() {
            $.ajax({
                type: "POST",
                url: "Home/GetTemplatesAvailable",
                data: {
                    
                },
                success: function(data) {
                    var toAdd = ko.utils.arrayMap(data, function(elem) {
                        return new NodeModel(elem);
                    });
                    ko.utils.arrayPushAll(self.templates, toAdd);

                },
                dataType: "json"
            });

        };

        self.CreateNodeFromTemplate = function(data) {
            var toSend = data.id();
            $.ajax({
                type: "POST",
                url: "Home/CreateNodeFromTemplate",
                data: {
                    nodeId: toSend
                },
                success: function(data) {
                    var toAdd = new NodeModel(data);
                    self.skills.push(toAdd);

                },
                dataType: "json"
            });

        };

        self.CopyNode = function(data) {
            var toSend = ko.toJS(data);
            $.ajax({
                type: "POST",
                url: "Home/Copy",
                data: {
                    model: toSend
                },
                success: function(data) {
                    var toAdd = new NodeModel(data);
                    self.skills.push(toAdd);

                },
                dataType: "json"
            });

        };
        

    };

    $(document).ready(function()
    {
        var viewModel = new AvailableSkillsViewModel();
        ko.applyBindings(viewModel);
        viewModel.RetrieveDataFromServer();
        viewModel.RetrieveTemplatesFromServer();
    });
</script>
<div>
        <ul data-bind="foreach: skills">
            <li>
                <span>
                    <span data-bind="text: '#'"></span>
                    <span data-bind="text: id"></span>
                    <span data-bind="text: ','"></span>
                    <span data-bind="text: name"></span>
                </span>
                <span>
                    <span data-bind="ifnot: RawViewIsEnabled">
                        <button data-bind="click: EnableRawView" >View Raw</button>
                    </span>
                    <span data-bind="if: RawViewIsEnabled">
                        <ul data-bind="foreach: tags">
                            <li >
                                <!-- <a data-bind="attr:{ href: $data, title: $data}, text: $data"></a> -->
                                <span data-bind="text: '#'"></span>
                                <span data-bind="text: id"></span>
                                <span data-bind="text: '{'"></span>
                                <span data-bind="text: tag"></span>
                                <span data-bind="text: '} -> {'"></span>
                                <span data-bind="text: value"></span>
                                <span data-bind="text: '}'"></span>
                            </li>
                        </ul>
                    </span>
                    <span data-bind="if: RawViewIsEnabled">
                        <button data-bind="click: DisableRawView" >Collapse Raw</button>
                    </span>
                    <span data-bind="if: RawViewIsEnabled">
                        <button data-bind="click: $root.CopyNode" >Copy Node</button>
                    </span>
                </span>
            </li>
        </ul>
    
</div>
<div>
    <input type="text" data-bind="value: newSkillName" ></input>
    <button data-bind="click: AddNewSkill" >add skill</button>
    <br>
    <br>
    <br>
    <br>
    <button data-bind="click: applyMigrations" >apply Migrations</button>
</div>
<div>
    <ul data-bind="foreach: templates">
            <li>
                <span>
                    <span data-bind="text: '#'"></span>
                    <span data-bind="text: id"></span>
                    <span data-bind="text: ','"></span>
                    <span data-bind="text: name"></span>
                    <span data-bind="text: templateType"></span>
                </span>
                
                <span>
                    <span data-bind="ifnot: RawViewIsEnabled">
                        <button data-bind="click: EnableRawView" >View Raw</button>
                    </span>
                    
                    <span data-bind="if: RawViewIsEnabled">
                        <ul data-bind="foreach: tags">
                            <li >
                                <!-- <a data-bind="attr:{ href: $data, title: $data}, text: $data"></a> -->
                                <span data-bind="text: '#'"></span>
                                <span data-bind="text: id"></span>
                                <span data-bind="text: '{'"></span>
                                <span data-bind="text: tag"></span>
                                <span data-bind="text: '} -> {'"></span>
                                <span data-bind="text: value"></span>
                                <span data-bind="text: '}'"></span>
                            </li>
                        </ul>
                    </span>
                    <span data-bind="if: RawViewIsEnabled">
                        <button data-bind="click: DisableRawView" >Collapse Raw</button>
                    </span>
                    <span >
                        <button data-bind="click: $root.CreateNodeFromTemplate" >Create Node</button>
                    </span>
                </span>
            </li>
        </ul>
</div>



