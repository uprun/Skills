@{
    ViewData["Title"] = "Skills";
}
<script>
    function applyMigrations()
    {
        $.ajax({
                type: "POST",
                url: "Home/ApplyMigrations",
                success: function(retrievedData) {

                    alert('success');

                },
                error:function(){
                    alert('error');

                },
                dataType: "json"
            });

    };
    
    function TagModel(data)
    {
        var self = this;
        self.id = ko.observable(data.id);
        self.tag = ko.observable(data.tag);
        self.value = ko.observable(data.value);
    };

    function NodeModel(data)
    {
        var self = this;
        self.id = ko.observable(data.id);
        
        self.tags = ko.observableArray(
            ko.utils.arrayMap(data.tags, function(elem) {
                    return new TagModel(elem);
                }
            )
        );

        self.removedTags = ko.observableArray();

        var match = ko.utils.arrayFirst(self.tags(), function(item) {
            return item.tag() == "name";
        });
        if(match){
            self.name = ko.observable(match.value());
        }
        
        self.ToProcessIsExpanded = ko.observable(false);
        self.ExpandToProcess = function() {
            self.ToProcessIsExpanded(true);
        };
        self.CollapseToProcess = function() {
            self.ToProcessIsExpanded(false);
        }

        self.RawViewIsEnabled = ko.observable(false);
        self.EnableRawView = function(){
            self.RawViewIsEnabled(true);
        };
        self.DisableRawView = function() {
            self.RawViewIsEnabled(false);
        };

        self.tagToAdd = ko.observable("");
        self.valueToAdd = ko.observable("");

        self.RemoveTag = function(refTag) {
            self.tags.remove(refTag);
            self.removedTags.push(refTag);
        };

        self.AddTag = function(data) {
            var toAdd = new TagModel({
                id: -1,
                tag: data.tagToAdd(),
                value: data.valueToAdd()
                }
                );
            self.tags.push(
                toAdd
            );
        };


    };


    function AvailableSkillsViewModel(data)
    {
        var self = this;
        if(data != null){
            self.skills = ko.observableArray(
                ko.utils.arrayMap(data, function(elem) {
                    return new NodeModel(elem);
                }
            ));
        }
        else
        {
            self.skills = ko.observableArray([]);
        }

        self.templates = ko.observableArray([]);

        
        self.RetrieveDataFromServer = function() {
            $.ajax({
                type: "POST",
                url: "Home/GetSkillsAvailable",
                data: {
                    
                },
                success: function(data) {
                    var toAdd = ko.utils.arrayMap(data, function(elem) {
                        return new NodeModel(elem);
                    });
                    ko.utils.arrayPushAll(self.skills, toAdd);

                },
                dataType: "json"
            });

        };

        self.RetrieveTemplatesFromServer = function() {
            $.ajax({
                type: "POST",
                url: "Home/GetTemplatesAvailable",
                data: {
                    
                },
                success: function(data) {
                    var toAdd = ko.utils.arrayMap(data, function(elem) {
                        return new NodeModel(elem);
                    });
                    ko.utils.arrayPushAll(self.templates, toAdd);

                },
                dataType: "json"
            });

        };

        self.CreateNodeFromTemplate = function(data) {
            var toSend = data.id();
            $.ajax({
                type: "POST",
                url: "Home/CreateNodeFromTemplate",
                data: {
                    nodeId: toSend
                },
                success: function(data) {
                    var toAdd = new NodeModel(data);
                    self.skills.push(toAdd);

                },
                dataType: "json"
            });

        };

        self.MakeNewEmptyNode = function() {
            $.ajax({
                type: "POST",
                url: "Home/MakeNewNode",
                success: function(data) {
                    var toAdd = new NodeModel(data);
                    self.skills.push(toAdd);

                },
                dataType: "json"
            });
        };
        
        

        

        self.ApplyChanges = function(data) {
            var model = ko.toJS(data);
            for(var x in model) {
                if(typeof(model[x]) === "function") {
                    model[x] = null;
                }
            }
            $.ajax({
                type: "POST",
                url: "Home/ApplyChanges",
                data: {
                    model: model,
                },
                success: function(receivedData) {
                    var toAdd = new NodeModel(receivedData);
                    self.skills.push(toAdd);
                },
                dataType: "json"
            });
        };

        

    };

    $(document).ready(function()
    {
        var viewModel = new AvailableSkillsViewModel();
        ko.applyBindings(viewModel);
        viewModel.RetrieveDataFromServer();
        viewModel.RetrieveTemplatesFromServer();
    });
</script>
<script type="text/html" id="node-template">
    <span>
        <span data-bind="text: '#'"></span>
        <span data-bind="text: id"></span>
        <span data-bind="text: ','"></span>
        <span data-bind="text: name"></span>
    </span>
    <span>
        <span data-bind="ifnot: RawViewIsEnabled">
            <button data-bind="click: EnableRawView" >View Raw</button>
        </span>
        <span data-bind="if: RawViewIsEnabled">
            <ul data-bind="foreach: tags">
                <li >
                    <span data-bind="ifnot: tag().startsWith('system-reference:')">
                        <button data-bind="click: $parent.RemoveTag">RemoveTag</button>
                    </span>
                    <span data-bind="text: '#'"></span>
                    <span data-bind="text: id"></span>
                    <span data-bind="text: '{'"></span>
                    <span data-bind="text: tag"></span>
                    <span data-bind="text: '} -> {'"></span>
                    <span data-bind="if: tag().startsWith('system-reference:')">
                        <span data-bind="text: value"></span>
                    </span>
                    <span data-bind="ifnot: tag().startsWith('system-reference:')">
                        <input data-bind="value: value"></input>
                    </span>
                    
                    <span data-bind="text: '}'"></span>
                </li>
            </ul>
            <br>
            <span>tag: <input data-bind="value: tagToAdd"></input></span>
            <span> value: <input data-bind="value: valueToAdd"></input></span>
            <button data-bind="click: AddTag" >Add Tag</button>
            <br>
            <button data-bind="click: $parent.ApplyChanges" >Commit</button>
            <br>
            <br>
            <span>
                <button data-bind="click: $parent.CreateNodeFromTemplate" >Create Of Same Type</button>
            </span>
            <br>
            <br>
        </span>
        
        <span data-bind="if: RawViewIsEnabled">
            <button data-bind="click: DisableRawView" >Collapse Raw</button>
        </span>
    </span>
</script>
<div>
        <ul data-bind="foreach: skills">
            <li data-bind="template: {name: 'node-template', data: $data}">
                
            </li>
        </ul>
    
</div>
<div>
    <br>
    <br>
    <br>
    <br>
    <button data-bind="click: applyMigrations" >apply Migrations</button>
</div>
<div>
    <span >
        <button data-bind="click: MakeNewEmptyNode" >Create New Empty Node</button>
    </span>
    <ul data-bind="foreach: templates">
            <li data-bind="template: {name: 'node-template', data: $data}">
            </li>
        </ul>
</div>



